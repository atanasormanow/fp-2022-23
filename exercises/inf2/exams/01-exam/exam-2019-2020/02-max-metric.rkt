#lang racket

;; “Метрика” наричаме функция, която приема като параметър списък от числа и връща число като резултат.
;; Да се напише функция max-metric, която приема като параметри списък от метрики ml и списък от списъци от числа ll
;; и връща метрика m от ml, за която сумата от стойностите, които m връща над елементите на ll,
;; е максимална в сравнение с останалите метрики от ml.

(define (prod l) (apply * l))
(define (sum l) (apply + l)) 

;; Пример 1
;; (max-metric (list sum prod) '((0 1 2) (3 4 5) (1337 0))) ;; => <sum>

;; (+ (sum '(0 1 2)) (sum '(3 4 5)) (sum '(1337 0)))
;; (+ 3 12 1337)
;; 1357 = сумата от стойностите, които <sum> връща над елементите на '((0 1 2) (3 4 5) (1337 0))

;; (+ (prod '(0 1 2)) (prod '(3 4 5)) (prod '(1337 0)))
;; (+ 0 60 0)
;; 60 = сумата от стойностите, които <prod> връща над елементите на '((0 1 2) (3 4 5) (1337 0))

;; 1357 > 60 => max-metric = <sum>

;; Пример 2
;; (max-metric (list car sum)  '((1000 -1000) (29 1) (42))) ;; => <car>

;; (+ (car '(1000 -1000)) (car (29 1)) (car (42)))
;; (+ 1000 29 42)
;; 1071 = сумата от стойностите, които <car> връща над елементите на '((1000 -1000) (29 1) (42))

;; (+ (sum '(1000 -1000)) (sum (29 1)) (sum (42)))
;; (+ 0 30 42)
;; 72 = сумата от стойностите, които <sum> връща над елементите на '((1000 -1000) (29 1) (42))

;; 1071 > 72 => max-metric = <car>

;; (sum-of-results sum '((1000 -1000) (29 1) (42))) ;; => 72
(define (sum-of-results metric ll)
  (foldr (lambda (elem result) (+ (metric elem) result)) 0 ll))

(define (max-metric ml ll)
  (foldr
    (lambda (metric result-metric)
      (if (> (sum-of-results metric ll) (sum-of-results result-metric ll))
          metric
          result-metric))
    (car ml)
    ml))

;; (max-metric (list sum prod) '((0 1 2) (3 4 5) (1337 0))) ;; => <sum>
;; (max-metric (list car sum)  '((1000 -1000) (29 1) (42))) ;; => <car>

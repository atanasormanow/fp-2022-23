#lang racket
(require rackunit)
(require "describe.rkt")

(display "=== зад 1 ===\n")


(define (from-to* a b)
  (if (> a b)
      '()
      (cons a (from-to* (+ a 1) b))))

(define (foldr* op nv l)
  (if (null? l)
      nv
      (op (car l) (foldr* op nv (cdr l)))))
(define (product* l)
  (foldr* * 1 l))

(define (products* l)
  (if (null? l)
      l
      (cons (product* l)
            (products* (cdr l)))))

(define (prime?* n)
  (foldr* (lambda (i rec)
            (and rec (zero? (remainder n i))))
          #t
          (from-to* 2 (/ n 2))))

(describe trim
  ;(check-equal? (map trim (products* '(1 2 3 4 5 8 10 11 13 14)))
  ;              '(640 640 320 320 80 16 2 1 1 1))
  (check-equal? (map trim (products* '(2 7 11 14 11)))
                '(154 77 11 1 1))
  (check-equal? (map trim (map (lambda (i) (* i 5)) (from-to* 1 30)))
                '(1 1 1 2 5 1 1 4 3 5 1 2 1 1 5 8 1 3 1 10 1 1 1 4 25 1 9 2 1 5))
  (check-equal? (map trim (from-to* 1 30))
                 '(1 1 1 2 1 1 1 4 3 1 1 2 1 1 1 8 1 3 1 2 1 1 1 4 5 1 9 2 1 1))
  (check-equal? (trim 360) 12)
  (check-equal? (trim 5) 1)
  )

(describe grow
  (check-equal? (map grow (products* '(2 7 11 14 11)))
                '(3652264 1826132 260876 23716 121))
  (check-equal? (map grow (map (lambda (i) (* i 5)) (from-to* 5 20)))
                '(125 900 1225 400 675 500 3025 1800 4225 4900 1125 800 7225 2700 9025 1000))
  (check-equal? (map grow (from-to* 1 20))
                '(1 4 9 8 25 36 49 16 27 100 121 72 169 196 225 32 289 108 361 200))
  (check-equal? (grow 20) 200)
  (check-equal? (grow 5) 25)
  (check-equal? (grow 4) 8)
  )

(display "\n=== зад 2 ===\n")

(describe commonUnitary
  (check-equal? (map (lambda (i) (commonUnitary i 140)) (from-to* 1 30))
                '(1 1 1 2 2 1 2 1 1 2 1 2 1 2 2 1 1 1 1 4 2 1 1 1 1 1 1 4 1 2))
  (check-equal? (commonUnitary 8 140)
                1)
  (check-equal? (commonUnitary 60 140)
                4)
  (check-equal? (commonUnitary 1 1)
                1)
  )

(describe maxUnitary
  (check-equal? (map (lambda (i) (maxUnitary i)) (filter (lambda (i)
                                                           (not (prime?* i))) (from-to* 2 30)))
                '(1 1 1 1 5 1 4 1 7 5 1 1 9 1 5 7 11 1 8 1 13 1 7 1 15)
                )
  (check-equal? (maxUnitary 16)
                1)
  (check-equal? (maxUnitary 12)
                4)
  (check-equal? (maxUnitary 10)
                5)
  (check-equal? (maxUnitary 8)
                1)
  (check-equal? (maxUnitary 60)
                20)
  (check-equal? (maxUnitary 4)
                1)
  (check-equal? (maxUnitary 2)
                1)
  )

(display "\n=== зад 3 ===\n")

(describe selectiveMerge
  (check-equal? (selectiveMerge * '(1 2 3 4 1 3 1 2) '(10 1 2 0 5 -2 -1 4))
                '(1 2 6 0 5 3 1 8))
  (check-equal? (selectiveMerge (lambda (x y) (remainder (+ x y) 10)) '(9 8 10 11 12 13 14 15) '(2 1 4 5 6 7 8 9))
                '(9 9 4 6 8 13 14 15))
  (check-equal? (selectiveMerge (lambda (x y) (/ (+ x y) 2)) '(9 8 7 6 5 4 3 2) '(2 3 4 5 6 7 8 9))
                '(9 8 7 6 5 4 3 2))
  (check-equal? (selectiveMerge - '(9 8 7 6 5 4 3 2) '(2 3 4 5 6 7 8 9))
                '(9 8 7 6 5 4 3 2))
  (check-equal? (selectiveMerge + '(9 8 7 6 5 4 3 2) '(2 3 4 5 6 7 8 9))
                '(9 11 11 11 11 11 11 11))
  (check-equal? (selectiveMerge + '(10) '(2))
                '(10))
  (check-equal? (selectiveMerge - '() '())
                '())
  )

(describe selectiveMap
  (check-equal? (selectiveMap (lambda (x) (- (* x x) 2)) '(2 -1 -2 -1 4 0 1 -4)
                 '(10 2 -3 2 -1 1 3 5))
                '(2 -1 7 2 -1 -2 -1 23))
  (check-equal? (selectiveMap - '(9 8 7 6 5 4 3 2) '(2 3 4 5 6 7 8 9))
                '(-9 -8 -7 -6 -5 -4 -3 -2))
  (check-equal? (selectiveMap + '(9 8 7 6 5 4 3 2) '(2 3 4 5 6 7 8 9))
                '(9 8 7 6 5 4 3 2))
  (check-equal? (selectiveMap + '(10) '(2))
                '(10))
  (check-equal? (selectiveMap - '() '())
                '())
  )

(display "\n=== зад 4 ===\n")

(describe preferredNetwork
  (check-equal? (preferredNetwork '(1 2 3 4 5 6) '((5 6 12 13) (7 2 9 8 1 10) (2 3 4 10 11 14)))
                '(2 3 4)
                )
  (check-equal? (preferredNetwork '(1 2 3 4 5 6) '((5 6 12 13) (7 2 9 8 1 10) (2 3 4 10 11 14)))
                '(5 6)
                )
  (check-equal? (preferredNetwork '(1 3 5 7) '((1) (1 3 5 7 8 40 41) (5 3) (5)))
                '(3 5)
                )
  (check-equal? (preferredNetwork '(1 3 5 7) '((11 13 1) (3 12 15) (18 19 5 11 12 13) (19 17 16 7 20)))
                '()
                )
  (check-equal? (preferredNetwork '(1 3 5 7) '((1) (3) (5) (7)))
                '()
                )
  (check-equal? (preferredNetwork '(1 3 5 7 8 20) '((1 3 8 40 41) (1 3 7 28) (5)))
                '(1 3 7)
                )
  (check-equal? (preferredNetwork '(1 2) '((7 2 9 8 1 10)))
                '(1 2)
                )
  (check-equal? (preferredNetwork '(1 2) '((1 2)))
                '(1 2)
                )
  (check-equal? (preferredNetwork '(1) '((2)))
                '()
                )
  (check-equal? (preferredNetwork '() '((1)))
                '()
                )
  (check-equal? (preferredNetwork '(1) '())
                '()
                )
  (check-equal? (preferredNetwork '() '())
                '()
                )
  )

(describe preferredNetworkForAll
  (check-equal? (preferredNetworkForAll '((1 3 5 7)) '((1) (1 3 5 7 8 40 41) (5 3) (5)))
                '(5 3)
                )
  (check-equal? (preferredNetworkForAll '((1 3 5 7)) '((11 13 1) (3 12 15) (18 19 5 11 12 13) (19 17 16 7 20)))
                '()
                )
  (check-equal? (preferredNetworkForAll '((1 3 5 7)) '((1) (3) (5) (7)))
                '()
                )
  (check-equal? (preferredNetworkForAll '((1 3 5 7 8 20)) '((1 3 8 40 41) (1 3 7 28) (5)))
                '(1 3 7)
                )
  (check-equal? (preferredNetworkForAll '((1 2)) '((7 2 9 8 1 10)))
                '(2 1)
                )
  (check-equal? (preferredNetworkForAll '((1 2)) '((1 2)))
                '(1 2)
                )
  (check-equal? (preferredNetworkForAll '((1)) '((2)))
                '()
                )
  (check-equal? (preferredNetworkForAll '(()) '((1)))
                '()
                )
  (check-equal? (preferredNetworkForAll '((1)) '())
                '()
                )
  (check-equal? (preferredNetworkForAll '(()) '())
                '()
                )
  (check-equal? (preferredNetworkForAll '() '())
                '()
                )
  (check-equal? (preferredNetworkForAll '((1 2 3) (10 20 30) (100 200 300) (7000))
                                        '((1 2 7000 10 20 9000) (20 4000 30 100 300) (5000 2 3 8000 300 200)))
                '(20 30 100 300)
                )
  (check-equal? (preferredNetworkForAll '((1 2 3) (10 20 30) (100 200 300))
                                        '((1 2 7000 10 20 9000) (20 4000 30 100 300) (5000 2 3 8000 300 200)))
                '(20 30 100 300)
                )
  (check-equal? (preferredNetworkForAll '((1 3 5 7 20) (7 40 41)) '((1 3 8 40 41) (1 3 7 28) (5)))
                '(1 3 40 41)
                )
  (check-equal? (preferredNetworkForAll '((7) (11) (1 3 5) (13)) '((1 3 7 28 29) (1 3 5 7 11 13) (13 11 3 5 14)))
                '(1 3 5)
                )
  (check-equal? (preferredNetworkForAll '((1 2 3 4) (10 20 30 40) (100 200 300 400))
                                        '((1 2 10 20) (20 30 100 300) (1 4 10 40 100 400 7000 7700 7770 7777 70 700 777) (2 3 300 200)))
                '(1 4 10 40 100 400)
                )
  )


(describe preferredDevice
  (check-equal? (preferredDevice '(1 2 3 4 5 6) '((5 6 12 13) (7 2 9 8 1 10) (2 3 4 10 11 14)))
                '(2 3 4)
                )
  (check-equal? (preferredDevice '(1 3 5 7) '((1) (1 3 5 7 8 40 41) (5 3) (5)))
                ;'(3 5)
                '(1 3 5 7)
                )
  (check-equal? (preferredDevice '(1 3 5 7) '((11 13 1) (3 12 15) (18 19 5 11 12 13) (19 17 16 7 20)))
                '()
                )
  (check-equal? (preferredDevice '(1 3 5 7) '((1) (3) (5) (7)))
                '()
                )
  (check-equal? (preferredDevice '(1 3 5 7 8 20) '((1 3 8 40 41) (1 3 7 28) (5)))
                ;'(1 3 7)
                '(1 3 8)
                )
  (check-equal? (preferredDevice '(1 2) '((7 2 9 8 1 10)))
                '(1 2)
                )
  (check-equal? (preferredDevice '(1 2) '((1 2)))
                '(1 2)
                )
  (check-equal? (preferredDevice '(1) '((2)))
                '()
                )
  (check-equal? (preferredDevice '() '((1)))
                '()
                )
  (check-equal? (preferredDevice '(1) '())
                '()
                )
  (check-equal? (preferredDevice '() '())
                '()
                )
  )

(describe preferredDeviceForAll
  (check-equal? (preferredDeviceForAll '((1) (1 3 5 7 8 40 41) (5 3) (5)) '((1 3 5 7)))
                '(1 3 5 7)
                )
  (check-equal? (preferredDeviceForAll '((11 13 1) (3 12 15) (18 19 5 11 12 13) (19 17 16 7 20)) '((1 3 5 7)))
                '()
                )
  (check-equal? (preferredDeviceForAll '((1) (3) (5) (7)) '((1 3 5 7)))
                '()
                )
  (check-equal? (preferredDeviceForAll '((1 3 8 40 41) (1 3 7 28) (5)) '((1 3 5 7 8 20)))
                '(1 3 8)
                )
  (check-equal? (preferredDeviceForAll '((7 2 9 8 1 10)) '((1 2)))
                '(2 1)
                )
  (check-equal? (preferredDeviceForAll '((1 2)) '((1 2)))
                '(1 2)
                )
  (check-equal? (preferredDeviceForAll '((1)) '((2)))
                '()
                )
  (check-equal? (preferredDeviceForAll '(()) '((1)))
                '()
                )
  (check-equal? (preferredDeviceForAll '((1)) '())
                '()
                )
  (check-equal? (preferredDeviceForAll '(()) '())
                '()
                )
  (check-equal? (preferredDeviceForAll '() '())
                '()
                )
  (check-equal? (preferredDeviceForAll '((1 2 7000 10 20 9000) (20 4000 30 100 300) (5000 2 3 8000 300 200))
                                       '((1 2 3 4 5 6) (10 20 30) (100 200 300) (7000)))
                '(20 30 100 300)
                )
  (check-equal? (preferredDeviceForAll '((1 2 7000 10 20 9000) (20 4000 30 100 300) (5000 2 3 8000 300 200))
                                       '((1 2 3 4) (10 20 30) (100 200 300)))
                '(20 30 100 300)
                )
  (check-equal? (preferredDeviceForAll '((1 3 8 40 41) (1 3 7 28) (5)) '((1 3 5 7 20) (7 40 41)))
                '(1 3 40 41)
                )
  (check-equal? (preferredDeviceForAll '((1 3 7 28 29) (1 3 5 7 11 13) (13 11 3 5 14)) '((7) (11) (1 3 5) (13)))
                '(1 3 5)
                )
  (check-equal? (preferredDeviceForAll '((1 2 10 20) (20 30 100 300) (1 4 10 40 100 400 7000 7700 7770 7777 70 700 777) (2 3 300 200))
                                       '((1 2 3 4) (10 20 30 40) (100 200 300 400)))
                '(1 4 10 40 100 400)
                )
  (check-equal? (preferredDeviceForAll '((1 3 8 40 41) (7) (5)) '((1 3) (3 8) (8 40)))
                '(1 3 8 40)
                )
  )

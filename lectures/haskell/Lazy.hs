module Lazy where

import Prelude hiding (enumFrom, repeat, cycle, iterate)

sumHeads :: Num a => [a] -> [a] -> a
sumHeads (x:_) (y:_) = x + y

-- >>> sumHeads [1..10000000000000000] [3..32894748974829374893748397489734]
-- 4

enumFrom :: Enum t => t -> [t]
enumFrom from = from : enumFrom (succ from)

-- >>> take 10 (enumFrom 5)
-- [5,6,7,8,9,10,11,12,13,14]

repeat :: t -> [t]
repeat x = x : repeat x

-- >>> take 10 (repeat 5)
-- [5,5,5,5,5,5,5,5,5,5]

ones = repeat 1
-- >>> take 10 ones
-- [1,1,1,1,1,1,1,1,1,1]

twos :: [Integer]
twos = [2,2..]

-- >>> take 10 twos
-- [2,2,2,2,2,2,2,2,2,2]

cycle :: [a] -> [a]
cycle l = l ++ cycle l

-- >>> take 10 (cycle [1,2,3])
-- [1,2,3,1,2,3,1,2,3,1]

iterate :: (t -> t) -> t -> [t]
iterate f z = z : iterate f (f z)

-- iterate f z = z : map f (iterate f z)

-- >>> take 10 (iterate (+1) 0)
-- [0,1,2,3,4,5,6,7,8,9]

pairs :: [(Integer, Integer)]
-- pairs = [ (x, y) | n <- [0..], x <- [0..n], y <- [0..n], x + y == n]

-- pairs = [ (?? n, ?? n) | n <- [0..] ]

pairs = [ (x, y) | n <- [0..], x <- [0..n], y <- [n - x] ]

-- pairs  = [ (x, y) | x <- [0..], y <- [0..x]]

-- >>> take 100 pairs
-- [(0,0),(0,1),(1,0),(0,2),(1,1),(2,0),(0,3),(1,2),(2,1),(3,0),(0,4),(1,3),(2,2),(3,1),(4,0),(0,5),(1,4),(2,3),(3,2),(4,1),(5,0),(0,6),(1,5),(2,4),(3,3),(4,2),(5,1),(6,0),(0,7),(1,6),(2,5),(3,4),(4,3),(5,2),(6,1),(7,0),(0,8),(1,7),(2,6),(3,5),(4,4),(5,3),(6,2),(7,1),(8,0),(0,9),(1,8),(2,7),(3,6),(4,5),(5,4),(6,3),(7,2),(8,1),(9,0),(0,10),(1,9),(2,8),(3,7),(4,6),(5,5),(6,4),(7,3),(8,2),(9,1),(10,0),(0,11),(1,10),(2,9),(3,8),(4,7),(5,6),(6,5),(7,4),(8,3),(9,2),(10,1),(11,0),(0,12),(1,11),(2,10),(3,9),(4,8),(5,7),(6,6),(7,5),(8,4),(9,3),(10,2),(11,1),(12,0),(0,13),(1,12),(2,11),(3,10),(4,9),(5,8),(6,7),(7,6),(8,5)]

pythagoreanTriples = [ (x, y, z) | z <- [1..], x <- [1..z], y <- [x..z],
                                   x^2 + y^2 == z^2, gcd x y == 1 ]

-- >>> take 10 pythagoreanTriples
-- [(3,4,5),(4,3,5),(5,12,13),(12,5,13),(8,15,17),(15,8,17),(7,24,25),(24,7,25),(20,21,29),(21,20,29)]
